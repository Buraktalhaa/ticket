generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URI")
}

// postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA

model Auth {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  user      User?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Token {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String
  birthday           String
  money              Int                 @default(0)
  active             Boolean             @default(true)
  photoName          String?             @unique
  email              String              @unique
  auth               Auth                @relation(fields: [email], references: [email])
  card               Card[]
  token              Token?
  passwordResetToken PasswordResetToken?
  userRole           UserRole[]
  ticket             Ticket[]
  order              Order[]
  point              Point[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
}

model UserRole {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
}

model Permission {
  id        String   @id @default(uuid())
  url       String   @unique
  permit    Permit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Permit {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
}

enum RoleType {
  user
  seller
  admin
}

model Role {
  id       String     @id @default(uuid())
  name     RoleType   @unique
  UserRole UserRole[]
  Permit   Permit[]
}

model Card {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  cardInformation String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model Ticket {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  categoryId  String
  category    Category     @relation(fields: [categoryId], references: [id])
  description String
  hour        Int
  price       Int
  day         DateTime
  stock       Int
  sold        Boolean
  images      String[]
  discount    Int          @default(0)
  status      TicketStatus @default(processing)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  order       Order[]
}

enum TicketStatus {
  processing
  approve
  deleted
  cancelling
}

model Category {
  id     String   @id @default(uuid())
  name   String   @unique
  ticket Ticket[]
  point  Point[]
}

model Order {
  id        String      @id @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket      @relation(fields: [ticketId], references: [id])
  quantity  Int
  orderDay  DateTime    @default(now())
  orderHour Int
  status    OrderStatus @default(pending)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now())
  point     Point[]
}

enum OrderStatus {
  pending // sipariş alındı, ödeme bekleniyor
  completed // sipariş başarıyla alındı
  cancelled // kullanıcı iptal etti
  failed // ödeme başarısız vs.
}

model Point {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  orderId    String
  order      Order    @relation(fields: [orderId], references: [id])
  point      Int
  expiresAt  DateTime
  createdAt  DateTime @default(now())
}
