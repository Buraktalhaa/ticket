generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// postgresql://USER:PASSWORD@HOST:PORT/DATABASE?schema=SCHEMA

model Auth {
  id        String   @id @default(uuid())
  email     String   @unique
  auth      User?    @relation(fields: [email], references: [email])
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model GoogleAuth {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model User {
  id                 String              @id @default(uuid())
  firstName          String
  lastName           String?
  birthday           DateTime?
  active             Boolean             @default(true)
  photoName          String?
  email              String              @unique
  companyId          String?
  company            Company?            @relation(fields: [companyId], references: [id])
  card               Card[]
  token              Token?
  passwordResetToken PasswordResetToken?
  userRole           UserRole[]
  ticket             Ticket[]
  order              Order[]
  point              Point[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now())
  googleToken        GoogleToken?
  GoogleAuth         GoogleAuth?
  Auth               Auth?
  Cart               Cart?
  Favorites          Favorite[]
}

model GoogleToken {
  id                 String   @id @default(uuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  googleAccessToken  String
  googleRefreshToken String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now())
}

model Token {
  id           String   @id @default(uuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  accessToken  String
  refreshToken String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Company {
  id        String   @id @default(uuid())
  name      String   @unique
  phone     String?
  email     String?
  ticket    Ticket[]
  users     User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model UserRole {
  id     String @id @default(uuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
  roleId String
  role   Role   @relation(fields: [roleId], references: [id])
}

enum RoleType {
  user
  seller
  admin
  moderator
}

model Role {
  id       String     @id @default(uuid())
  name     RoleType   @unique
  UserRole UserRole[]
  Permit   Permit[]
}

model Permission {
  id        String   @id @default(uuid())
  url       String   @unique
  permit    Permit[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Permit {
  id           String     @id @default(uuid())
  roleId       String
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now())
}

model Card {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  cardInformation String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
}

model Ticket {
  id             String       @id @default(uuid())
  pnr            String       @unique
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  categoryId     String
  category       Category     @relation(fields: [categoryId], references: [id])
  companyId      String
  company        Company      @relation(fields: [companyId], references: [id])
  title          String
  description    String
  city           String
  location       String
  pointRate      Float
  dateTime       DateTime
  price          Int
  pointExpiresAt DateTime
  stock          Int
  sold           Boolean      @default(false)
  images         String[]
  discount       Int          @default(0)
  status         TicketStatus @default(processing)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now())
  order          Order[]
  Cart           Cart[]
  Favorites      Favorite[]
}

enum TicketStatus {
  processing
  approve
  deleted
  cancelling
  awaiting
}

model Category {
  id     String   @id @default(uuid())
  name   String   @unique
  ticket Ticket[]
  point  Point[]
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  ticketId    String
  ticket      Ticket      @relation(fields: [ticketId], references: [id])
  quantity    Int
  orderDay    DateTime    @default(now())
  status      OrderStatus @default(pending)
  pointsUsed  Float       @default(0)
  usePoints   Boolean     @default(false)
  paymentId   String?
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now())
}

enum OrderStatus {
  pending
  completed
  cancelled
  failed
  approved
}

model Point {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])
  point      Int
  expiresAt  DateTime @default("2025-12-31T23:59:59Z")
  createdAt  DateTime @default(now())

  @@unique([userId, categoryId])
}

model Cart {
  id       String @id @default(uuid())
  userId   String @unique
  user     User   @relation(fields: [userId], references: [id])
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id])
  count    Int
}

model Favorite {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, ticketId])
}